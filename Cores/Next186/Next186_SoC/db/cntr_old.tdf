--lpm_counter DEVICE_FAMILY="Cyclone IV E" lpm_avalue=1 lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_pvalue=1 lpm_width=1 clock cnt_en cout q
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_counter 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION cycloneive_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( DONT_TOUCH, LUT_MASK, SUM_LUTC_INPUT)
RETURNS ( combout, cout);

--synthesis_resources = lut 1 reg 1 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to counter_reg_bit0} POWER_UP_LEVEL=HIGH";

SUBDESIGN cntr_old
( 
	clock	:	input;
	cnt_en	:	input;
	cout	:	output;
	q[0..0]	:	output;
) 
VARIABLE 
	counter_comb_bita0 : cycloneive_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_reg_bit0 : dffeas
		WITH (
			power_up = "high"
		);
	aclr_actual	: WIRE;
	clk_en	: NODE;
	cout_actual	: WIRE;
	data[0..0]	: NODE;
	external_cin	: WIRE;
	s_val[0..0]	: WIRE;
	safe_q[0..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_comb_bita[0..0].cin = ( external_cin);
	counter_comb_bita[0..0].dataa = ( counter_reg_bit[0..0].q);
	counter_comb_bita[0..0].datab = ( updown_dir);
	counter_comb_bita[0..0].datad = ( B"1");
	counter_reg_bit[0..0].asdata = ((! sclr) & ((sset & s_val[]) # ((! sset) & data[])));
	counter_reg_bit[0..0].clk = clock;
	counter_reg_bit[0..0].clrn = (! aclr_actual);
	counter_reg_bit[0..0].d = ( counter_comb_bita[0].combout);
	counter_reg_bit[0..0].ena = (clk_en & (((sclr # sset) # sload) # cnt_en));
	counter_reg_bit[0..0].sload = ((sclr # sset) # sload);
	aclr_actual = B"0";
	clk_en = VCC;
	cout = cout_actual;
	cout_actual = (counter_comb_bita[0].cout # (time_to_clear & updown_dir));
	data[] = GND;
	external_cin = B"1";
	q[] = safe_q[];
	s_val[] = B"1";
	safe_q[] = counter_reg_bit[0..0].q;
	sclr = GND;
	sload = GND;
	sset = GND;
	time_to_clear = B"0";
	updown_dir = B"1";
END;
--VALID FILE
