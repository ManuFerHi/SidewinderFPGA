--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone IV E" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=512 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTH_R=32 LPM_WIDTHU=9 LPM_WIDTHU_R=8 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRSYNC_DELAYPIPE=4 aclr(gnd) data q rdclk rdreq wrclk wrreq wrusedw CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone IV E" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 17.1 cbx_a_gray2bin 2017:10:25:18:06:52:SJ cbx_a_graycounter 2017:10:25:18:06:52:SJ cbx_altdpram 2017:10:25:18:06:52:SJ cbx_altera_counter 2017:10:25:18:06:52:SJ cbx_altera_gray_counter 2017:10:25:18:06:52:SJ cbx_altera_syncram 2017:10:25:18:06:52:SJ cbx_altera_syncram_nd_impl 2017:10:25:18:06:52:SJ cbx_altsyncram 2017:10:25:18:06:53:SJ cbx_cycloneii 2017:10:25:18:06:53:SJ cbx_dcfifo 2017:10:25:18:06:53:SJ cbx_fifo_common 2017:10:25:18:06:52:SJ cbx_lpm_add_sub 2017:10:25:18:06:53:SJ cbx_lpm_compare 2017:10:25:18:06:53:SJ cbx_lpm_counter 2017:10:25:18:06:53:SJ cbx_lpm_decode 2017:10:25:18:06:53:SJ cbx_lpm_mux 2017:10:25:18:06:53:SJ cbx_mgl 2017:10:25:18:08:29:SJ cbx_nadder 2017:10:25:18:06:53:SJ cbx_scfifo 2017:10:25:18:06:53:SJ cbx_stratix 2017:10:25:18:06:53:SJ cbx_stratixii 2017:10:25:18:06:53:SJ cbx_stratixiii 2017:10:25:18:06:53:SJ cbx_stratixv 2017:10:25:18:06:53:SJ cbx_util_mgl 2017:10:25:18:06:53:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION a_gray2bin_ugb (gray[8..0])
RETURNS ( bin[8..0]);
FUNCTION a_graycounter_rn6 (clock, cnt_en)
RETURNS ( q[8..0]);
FUNCTION a_graycounter_m5c (clock, cnt_en)
RETURNS ( q[8..0]);
FUNCTION altsyncram_7011 (address_a[8..0], address_b[7..0], addressstall_b, clock0, clock1, clocken1, data_a[15..0], wren_a)
RETURNS ( q_b[31..0]);
FUNCTION alt_synch_pipe_h9l (clock, d[8..0])
RETURNS ( q[8..0]);
FUNCTION dffpipe_1v8 (clock, d[8..0])
RETURNS ( q[8..0]);
FUNCTION dffpipe_909 (clock, d[9..0])
RETURNS ( q[9..0]);
FUNCTION alt_synch_pipe_i9l (clock, d[8..0])
RETURNS ( q[8..0]);
FUNCTION cmpr_f66 (dataa[8..0], datab[8..0])
RETURNS ( aeb);
FUNCTION cntr_old (clock, cnt_en)
RETURNS ( cout, q[0..0]);

--synthesis_resources = lut 12 M9K 1 reg 110 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 2;{-to wrptr_g} suppress_da_rule_internal=S102;-name CUT ON -from rdptr_g -to ws_dgrp|dffpipe_3v8:dffpipe17|dffe18a;-name SDC_STATEMENT ""set_false_path -from *rdptr_g* -to *ws_dgrp|dffpipe_3v8:dffpipe17|dffe18a* "";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe_2v8:dffpipe12|dffe13a;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_2v8:dffpipe12|dffe13a* """;

SUBDESIGN dcfifo_6qf1
( 
	aclr	:	input;
	data[15..0]	:	input;
	q[31..0]	:	output;
	rdclk	:	input;
	rdreq	:	input;
	wrclk	:	input;
	wrreq	:	input;
	wrusedw[8..0]	:	output;
) 
VARIABLE 
	wrptr_g_gray2bin : a_gray2bin_ugb;
	ws_dgrp_gray2bin : a_gray2bin_ugb;
	rdptr_g1p : a_graycounter_rn6;
	wrptr_g1p : a_graycounter_m5c;
	fifo_ram : altsyncram_7011;
	delayed_wrptr_g[8..0] : dffe;
	rdptr_g[8..0] : dffe;
	wrptr_g[9..0] : dffe;
	rs_dgwp : alt_synch_pipe_h9l;
	ws_brp : dffpipe_1v8;
	ws_bwp : dffpipe_909;
	ws_dgrp : alt_synch_pipe_i9l;
	wrusedw_sub_dataa[9..0]	:	WIRE;
	wrusedw_sub_datab[9..0]	:	WIRE;
	wrusedw_sub_result[9..0]	:	WIRE;
	rdempty_eq_comp : cmpr_f66;
	wrfull_eq_comp : cmpr_f66;
	cntr_b : cntr_old;
	const_node_aclr	: NODE;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[8..0]	: WIRE;
	ram_address_b[7..0]	: WIRE;
	temp_wrusedw_sub_data[9..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[8..0]	: WIRE;
	ws_bwp_reg_data[9..0]	: WIRE;

BEGIN 
	wrptr_g_gray2bin.gray[8..0] = wrptr_g[9..1].q;
	ws_dgrp_gray2bin.gray[] = ws_dgrp.q[];
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = valid_rdreq;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = (valid_wrreq & cntr_b.cout);
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! valid_rdreq);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].d = wrptr_g[9..1].q;
	rdptr_g[].clk = rdclk;
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrptr_g[].clk = wrclk;
	wrptr_g[].d = ( wrptr_g1p.q[], cntr_b.q[]);
	wrptr_g[].ena = valid_wrreq;
	rs_dgwp.clock = rdclk;
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_brp.clock = wrclk;
	ws_brp.d[] = ws_dgrp_gray2bin.bin[];
	ws_bwp.clock = wrclk;
	ws_bwp.d[] = ws_bwp_reg_data[];
	ws_dgrp.clock = wrclk;
	ws_dgrp.d[] = rdptr_g[].q;
	wrusedw_sub_result[] = wrusedw_sub_dataa[] - wrusedw_sub_datab[];
	wrusedw_sub_dataa[] = ws_bwp.q[];
	wrusedw_sub_datab[] = temp_wrusedw_sub_data[];
	rdempty_eq_comp.dataa[] = rs_dgwp.q[];
	rdempty_eq_comp.datab[] = rdptr_g[].q;
	wrfull_eq_comp.dataa[] = ws_dgrp.q[];
	wrfull_eq_comp.datab[] = wrptr_gs[];
	cntr_b.clock = wrclk;
	cntr_b.cnt_en = valid_wrreq;
	const_node_aclr = aclr;
	int_rdempty = rdempty_eq_comp.aeb;
	int_wrfull = wrfull_eq_comp.aeb;
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_g[9..9].q $ wrptr_g[8..8].q), wrptr_g[7..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[8..8] $ rdptr_g1p.q[7..7]), rdptr_g1p.q[6..0]);
	temp_wrusedw_sub_data[] = ( ws_brp.q[], GND);
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrptr_gs[] = ( (! wrptr_g[9..9].q), (! wrptr_g[8..8].q), wrptr_g[7..1].q);
	wrusedw[] = ( wrusedw_sub_result[8..0]);
	ws_bwp_reg_data[] = ( wrptr_g_gray2bin.bin[], wrptr_g[0..0].q);
END;
--VALID FILE
