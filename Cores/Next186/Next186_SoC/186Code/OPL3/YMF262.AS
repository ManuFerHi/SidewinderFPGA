	global	small_model
	psect	data,class=DATA
	global	_chip
_chip:
	defb	-52
	defb	-51
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	defb	0,0,0
	psect	const,class=CODE
_slot_array:
	defb	0
	defb	02h
	defb	04h
	defb	01h
	defb	03h
	defb	05h
	defb	-1
	defb	-1
	defb	06h
	defb	08h
	defb	0Ah
	defb	07h
	defb	09h
	defb	0Bh
	defb	-1
	defb	-1
	defb	0Ch
	defb	0Eh
	defb	010h
	defb	0Dh
	defb	0Fh
	defb	011h
	defb	-1
	defb	-1
	defb	-1
	defb	-1
	defb	-1
	defb	-1
	defb	-1
	defb	-1
	defb	-1
	defb	-1
_ksl_tab:
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	08h
	defb	0Ch
	defb	010h
	defb	014h
	defb	018h
	defb	01Ch
	defb	020h
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0Ch
	defb	014h
	defb	01Ch
	defb	020h
	defb	028h
	defb	02Ch
	defb	030h
	defb	034h
	defb	038h
	defb	03Ch
	defb	040h
	defb	0
	defb	0
	defb	0
	defb	014h
	defb	020h
	defb	02Ch
	defb	034h
	defb	03Ch
	defb	040h
	defb	048h
	defb	04Ch
	defb	050h
	defb	054h
	defb	058h
	defb	05Ch
	defb	060h
	defb	0
	defb	0
	defb	020h
	defb	034h
	defb	040h
	defb	04Ch
	defb	054h
	defb	05Ch
	defb	060h
	defb	068h
	defb	06Ch
	defb	070h
	defb	074h
	defb	078h
	defb	07Ch
	defb	-128
	defb	0
	defb	020h
	defb	040h
	defb	054h
	defb	060h
	defb	06Ch
	defb	074h
	defb	07Ch
	defb	-128
	defb	-120
	defb	-116
	defb	-112
	defb	-108
	defb	-104
	defb	-100
	defb	-96
	defb	0
	defb	040h
	defb	060h
	defb	074h
	defb	-128
	defb	-116
	defb	-108
	defb	-100
	defb	-96
	defb	-88
	defb	-84
	defb	-80
	defb	-76
	defb	-72
	defb	-68
	defb	-64
	defb	0
	defb	060h
	defb	-128
	defb	-108
	defb	-96
	defb	-84
	defb	-76
	defb	-68
	defb	-64
	defb	-56
	defb	-52
	defb	-48
	defb	-44
	defb	-40
	defb	-36
	defb	-32
_ksl_shift:
	defb	01Fh
	defb	01h
	defb	02h
	defb	0
_sl_tab:
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	020h
	defb	028h
	defb	030h
	defb	038h
	defb	040h
	defb	048h
	defb	050h
	defb	058h
	defb	060h
	defb	068h
	defb	070h
	defb	-8
_eg_rate_select:
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	070h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	0
	defb	08h
	defb	010h
	defb	018h
	defb	020h
	defb	028h
	defb	030h
	defb	038h
	defb	040h
	defb	048h
	defb	050h
	defb	058h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
	defb	060h
_eg_rate_shift:
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0Ch
	defb	0Ch
	defb	0Ch
	defb	0Ch
	defb	0Bh
	defb	0Bh
	defb	0Bh
	defb	0Bh
	defb	0Ah
	defb	0Ah
	defb	0Ah
	defb	0Ah
	defb	09h
	defb	09h
	defb	09h
	defb	09h
	defb	08h
	defb	08h
	defb	08h
	defb	08h
	defb	07h
	defb	07h
	defb	07h
	defb	07h
	defb	06h
	defb	06h
	defb	06h
	defb	06h
	defb	05h
	defb	05h
	defb	05h
	defb	05h
	defb	04h
	defb	04h
	defb	04h
	defb	04h
	defb	03h
	defb	03h
	defb	03h
	defb	03h
	defb	02h
	defb	02h
	defb	02h
	defb	02h
	defb	01h
	defb	01h
	defb	01h
	defb	01h
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
	defb	0
_mul_tab:
	defb	01h
	defb	02h
	defb	04h
	defb	06h
	defb	08h
	defb	0Ah
	defb	0Ch
	defb	0Eh
	defb	010h
	defb	012h
	defb	014h
	defb	014h
	defb	018h
	defb	018h
	defb	01Eh
	defb	01Eh
	psect	text,class=CODE
_FM_KEYON:
	push	ix
	ld	ix,0
	add	ix,sp
	dec	sp
	push	iy
;_key_set stored from c
	ld	(ix+-1),c
; _SLOT loaded to iy
	push	de
	pop	iy
;C:\HTC\PROJECTS\OPL3\YMF262.C: 87: if( !SLOT->key )
	ld	a,(iy+29)
	or	a
	jp	nz,l5
;C:\HTC\PROJECTS\OPL3\YMF262.C: 88: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 89: SLOT->Cnt = 0;
	xor	a
	ld	(iy+4),a
	ld	(iy+5),a
	ld	(iy+6),a
	ld	(iy+7),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 90: SLOT->state = 4;
	ld	(iy+18),04h
l5:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 91: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 92: SLOT->key |= key_set;
	ld	a,(iy+29)
	or	(ix+-1)
	ld	(iy+29),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 93: }
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
;C:\HTC\PROJECTS\OPL3\YMF262.C: 95: static void FM_KEYOFF(OPL3_SLOT *SLOT, uint8_t key_clr)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 96: {
_FM_KEYOFF:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 97: if( SLOT->key )
	ld	hl,01Dh
	add	hl,de
	ld	a,(hl)
	or	a
	ret	z
;C:\HTC\PROJECTS\OPL3\YMF262.C: 98: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 99: SLOT->key &= key_clr;
	ld	hl,01Dh
	add	hl,de
	ld	a,(hl)
	and	c
	ld	(hl),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 100: if( !SLOT->key )
	ld	hl,01Dh
	add	hl,de
	ld	a,(hl)
	or	a
	ret	nz
;C:\HTC\PROJECTS\OPL3\YMF262.C: 101: if (SLOT->state>1) SLOT->state = 1;
	ld	hl,012h
	add	hl,de
	ld	a,(hl)
	cp	02h
	ret	c
	ld	hl,012h
	add	hl,de
	ld	(hl),01h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 103: }
	ret	
	global	shlr
	global	llmul
	global	lllsh
	global	llrsh
;C:\HTC\PROJECTS\OPL3\YMF262.C: 106: static void CALC_FCSLOT(OPL3_CH *CH, OPL3_SLOT *SLOT)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 107: {
_CALC_FCSLOT:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	dec	sp
	push	iy
;_CH stored from de
	ld	(ix+-3),e
	ld	(ix+-2),d
; _SLOT loaded to iy
	push	bc
	pop	iy
;C:\HTC\PROJECTS\OPL3\YMF262.C: 108: uint8_t ksr;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 111: uint8_t shift = 7 - (CH->block_fnum >> 10);
	ld	b,0Ah
	ld	l,e
	ld	h,d
	ld	de,02Ch
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	shlr
	ld	c,l
	ld	a,07h
	sub	c
	ld	(ix+-1),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 112: SLOT->Incr = ((CH->block_fnum & 0x03ff) * (uint32_t)SLOT->mul << 2) >> shift;
	ld	e,(iy+30)
	ld	d,(iy+31)
	ld	hl,0
	push	hl
	push	de
	ld	l,(ix+-3)
	ld	h,(ix+-2)
	ld	de,02Ch
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	ld	a,c
	ld	e,a
	ld	a,b
	and	03h
	ld	d,a
	ld	hl,0
	call	llmul
	ld	b,02h
	call	lllsh
	ld	b,(ix+-1)
	call	llrsh
	ld	(iy+8),e
	ld	(iy+9),d
	ld	(iy+10),l
	ld	(iy+11),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 113: ksr = CH->kcode >> SLOT->KSR;
; _ksr allocated to c
	ld	b,(iy+26)
	ld	l,(ix+-3)
	ld	h,(ix+-2)
	ld	de,05Eh
	add	hl,de
	ld	l,(hl)
	inc	b
	dec	b
	jp	z,u11
u10:
	srl	l
	djnz	u10
u11:
	ld	c,l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 115: if( SLOT->ksr != ksr )
	ld	a,(iy+28)
	cp	c
	jp	z,l10
;C:\HTC\PROJECTS\OPL3\YMF262.C: 116: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 117: SLOT->ksr = ksr;
	ld	(iy+28),c
;C:\HTC\PROJECTS\OPL3\YMF262.C: 118: ksr += SLOT->ar;
	ld	a,c
	add	a,(iy+0)
	ld	c,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 120: if (ksr < 16+60)
	cp	04Ch
	jp	nc,l12
;C:\HTC\PROJECTS\OPL3\YMF262.C: 121: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 122: SLOT->eg_sh_ar = eg_rate_shift [ksr];
	ld	hl,_eg_rate_shift
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+38),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 123: SLOT->eg_sel_ar = eg_rate_select[ksr];
	ld	hl,_eg_rate_select
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+39),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 124: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 125: else
	jp	l13
l12:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 126: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 127: SLOT->eg_sh_ar = 0;
	ld	(iy+38),0
;C:\HTC\PROJECTS\OPL3\YMF262.C: 128: SLOT->eg_sel_ar = 13*(8);
	ld	(iy+39),068h
l13:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 129: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 130: ksr = SLOT->dr + SLOT->ksr;
	ld	a,(iy+1)
	add	a,(iy+28)
	ld	c,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 131: SLOT->eg_sh_dr = eg_rate_shift [ksr];
	ld	hl,_eg_rate_shift
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+40),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 132: SLOT->eg_sel_dr = eg_rate_select[ksr];
	ld	hl,_eg_rate_select
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+41),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 133: ksr = SLOT->rr + SLOT->ksr;
	ld	a,(iy+2)
	add	a,(iy+28)
	ld	c,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 134: SLOT->eg_sh_rr = eg_rate_shift [ksr];
	ld	hl,_eg_rate_shift
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+42),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 135: SLOT->eg_sel_rr = eg_rate_select[ksr];
	ld	hl,_eg_rate_select
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+43),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 136: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 137: }
l10:
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
	global	_chip
	global	lmul
	global	lmul
;C:\HTC\PROJECTS\OPL3\YMF262.C: 140: static void set_mul(uint8_t slot, uint8_t v)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 141: {
_set_mul:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	bc
	push	iy
;_v stored from c
	ld	(ix+-2),c
;_slot stored from e
	ld	(ix+-1),e
;C:\HTC\PROJECTS\OPL3\YMF262.C: 142: OPL3_CH *CH = &chip.P_CH[slot >> 1];
; _CH allocated to iy
	ld	de,060h
	ld	a,(ix+-1)
	srl	a
	ld	l,a
	ld	h,0
	call	lmul
	ld	de,_chip
	add	hl,de
	push	hl
	pop	iy
;C:\HTC\PROJECTS\OPL3\YMF262.C: 143: OPL3_SLOT *SLOT = (slot & 1) ? &CH->SLOT1 : &CH->SLOT0;
	bit	0,(ix+-1)
	jp	nz,u33
	push	iy
	pop	hl
u34:
	ld	(ix+-4),l
	ld	(ix+-3),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 145: SLOT->mul = 1154*mul_tab[v & 0x0f];
	ld	de,0482h
	ld	a,(ix+-2)
	and	0Fh
	ld	l,a
	ld	h,0
	ld	bc,_mul_tab
	add	hl,bc
	ld	l,(hl)
	ld	h,0
	call	lmul
	push	hl
	ld	de,01Eh
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	add	hl,de
	ex	de,hl
	pop	hl
	ld	a,l
	ld	(de),a
	inc	de
	ld	a,h
	ld	(de),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 146: SLOT->KSR = (v & 0x10) ? 0 : 2;
; _SLOT loaded to bc
	ld	c,(ix+-4)
	ld	b,(ix+-3)
	bit	04h,(ix+-2)
	ld	a,0
	jp	nz,u40
	ld	a,02h
u40:
	ld	hl,01Ah
	add	hl,bc
	ld	(hl),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 147: SLOT->eg_type = !!(v & 0x20);
	bit	05h,(ix+-2)
	ld	a,01h
	jp	nz,u50
	dec	a
u50:
	ld	hl,013h
	add	hl,bc
	ld	(hl),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 148: SLOT->vib = !!(v & 0x40);
	bit	06h,(ix+-2)
	ld	a,01h
	jp	nz,u60
	dec	a
u60:
	ld	hl,022h
	add	hl,bc
	ld	(hl),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 149: SLOT->AMmask_TLL = ((uint16_t)(v & 0x80) << 8) + (SLOT->AMmask_TLL & 0x7fff);
	ld	a,(ix+-2)
	and	-128
	ld	l,a
	ld	d,l
	ld	e,0
	ld	hl,014h
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	res	07h,h
	add	hl,de
	ex	de,hl
	ld	hl,014h
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
;C:\HTC\PROJECTS\OPL3\YMF262.C: 151: if (chip.OPL3_mode)
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l15
;C:\HTC\PROJECTS\OPL3\YMF262.C: 152: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 153: int8_t chan_no = slot >> 1;
; _chan_no allocated to b
	ld	a,(ix+-1)
	srl	a
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 155: switch(chan_no)
	ld	l,a
	ld	h,0
	xor	a
	or	a
	jp	c,l34
	jp	nz,j13
	ld	a,0Eh
	cp	l
	jp	c,l34
j13:
	add	hl,hl
	ld	de,S13
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)
u33:
	ld	hl,030h
	push	iy
	pop	de
	add	hl,de
	jp	u34
l23:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 159: if (CH->extended) CALC_FCSLOT(CH,SLOT);
	ld	a,(iy+92)
	ld	c,(ix+-4)
	ld	b,(ix+-3)
	push	iy
	pop	de
L6:
	call	_CALC_FCSLOT
;C:\HTC\PROJECTS\OPL3\YMF262.C: 160: else CALC_FCSLOT(CH,SLOT);
	jp	l14
;C:\HTC\PROJECTS\OPL3\YMF262.C: 161: break;
l31:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 164: if ((CH-3)->extended) CALC_FCSLOT(CH-3,SLOT);
	ld	hl,-196
	push	iy
	pop	de
	add	hl,de
	ld	a,(hl)
	or	a
	ld	c,(ix+-4)
	ld	b,(ix+-3)
	jp	z,L2

	ld	de,0120h
	push	iy
	pop	hl
	or	a
	sbc	hl,de
	ex	de,hl
	jp	L6

;C:\HTC\PROJECTS\OPL3\YMF262.C: 166: break;
l34:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 167: default:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 168: CALC_FCSLOT(CH,SLOT);
	ld	c,(ix+-4)
	ld	b,(ix+-3)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 165: else CALC_FCSLOT(CH,SLOT);
L2:
	push	iy
	pop	de
	jp	L6

;C:\HTC\PROJECTS\OPL3\YMF262.C: 171: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 172: else CALC_FCSLOT(CH,SLOT);
l15:
	ld	c,(ix+-4)
	ld	b,(ix+-3)
	push	iy
	pop	de
	call	_CALC_FCSLOT
;C:\HTC\PROJECTS\OPL3\YMF262.C: 173: }
l14:
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
	psect		const
S13:
	defw	l23
	defw	l23
	defw	l23
	defw	l31
	defw	l31
	defw	l31
	defw	l34
	defw	l34
	defw	l34
	defw	l23
	defw	l23
	defw	l23
	defw	l31
	defw	l31
	defw	l31
	global	lmul
	psect		text
;C:\HTC\PROJECTS\OPL3\YMF262.C: 176: static void set_ksl_tl(uint8_t slot, uint8_t v)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 177: {
_set_ksl_tl:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	bc
	push	iy
;_v stored from c
	ld	(ix+-1),c
;_slot stored from e
	ld	(ix+-2),e
;C:\HTC\PROJECTS\OPL3\YMF262.C: 178: OPL3_CH *CH = &chip.P_CH[slot >> 1];
	ld	de,060h
	ld	a,(ix+-2)
	srl	a
	ld	l,a
	ld	h,0
	call	lmul
	ld	de,_chip
	add	hl,de
	ld	(ix+-4),l
	ld	(ix+-3),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 179: OPL3_SLOT *SLOT = (slot & 1) ? &CH->SLOT1 : &CH->SLOT0;
; _SLOT allocated to iy
	bit	0,(ix+-2)
	jp	nz,L8

u84:
	push	hl
	pop	iy
;C:\HTC\PROJECTS\OPL3\YMF262.C: 181: SLOT->ksl = ksl_shift[v >> 6];
	ld	hl,_ksl_shift
	ld	b,06h
	ld	c,(ix+-1)
	inc	b
	dec	b
	jp	z,u91
u90:
	srl	c
	djnz	u90
u91:
	ld	a,c
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+27),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 182: SLOT->TL = (v & 0x3f) << (10-1-7);
	ld	a,(ix+-1)
	and	03Fh
	sll	a
	sll	a
	ld	(iy+16),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 183: SLOT->AMmask_TLL = SLOT->TL + (CH->ksl_base >> SLOT->ksl) + (SLOT->AMmask_TLL & 0x8000);
	ld	a,(iy+21)
	and	080h
	ld	d,a
	ld	e,0
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	ld	bc,05Dh
	add	hl,bc
	ld	l,(hl)
	ld	b,(iy+27)
	inc	b
	dec	b
	jp	z,u101
u100:
	srl	l
	djnz	u100
u101:
	ld	h,0
	ld	a,(iy+16)
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	add	hl,de
	ld	(iy+20),l
	ld	(iy+21),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 185: if (chip.OPL3_mode)
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l36
;C:\HTC\PROJECTS\OPL3\YMF262.C: 186: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 187: uint8_t chan_no = slot >> 2;
; _chan_no allocated to b
	ld	a,(ix+-2)
	srl	a
	srl	a
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 189: switch(chan_no)
	cp	03h
	jp	z,l45
	cp	04h
	jp	z,l45
	cp	05h
	jp	z,l45
	cp	0Ch
	jp	z,l45
	cp	0Dh
	jp	z,l45
	cp	0Eh
	jp	z,l45
;C:\HTC\PROJECTS\OPL3\YMF262.C: 196: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 197: }
l36:
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
L8:
	ld	de,030h
	add	hl,de
	jp	u84
l45:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 193: if ((CH-3)->extended) SLOT->AMmask_TLL = SLOT->TL + ((CH-3)->ksl_base>>SLOT->ksl) + (SLOT->AMmask_TLL & 0x8000);
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	ld	de,-196
	add	hl,de
	ld	a,(hl)
	or	a
	jp	z,l36
	ld	a,(iy+21)
	and	080h
	ld	d,a
	ld	e,0
	ld	l,(ix+-4)
	ld	h,(ix+-3)
	ld	bc,-195
	add	hl,bc
	ld	l,(hl)
	ld	b,(iy+27)
	inc	b
	dec	b
	jp	z,u111
u110:
	srl	l
	djnz	u110
u111:
	ld	h,0
	ld	a,(iy+16)
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	add	hl,de
	ld	(iy+20),l
	ld	(iy+21),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 194: break;
	jp	l36
	global	lmul
;C:\HTC\PROJECTS\OPL3\YMF262.C: 200: static void set_ar_dr(uint8_t slot, uint8_t v)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 201: {
_set_ar_dr:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	bc
	push	iy
;_v stored from c
	ld	(ix+-2),c
;_slot stored from e
	ld	(ix+-1),e
;C:\HTC\PROJECTS\OPL3\YMF262.C: 202: OPL3_CH *CH = &chip.P_CH[slot >> 1];
	ld	de,060h
	ld	a,(ix+-1)
	srl	a
	ld	l,a
	ld	h,0
	call	lmul
	ld	de,_chip
	add	hl,de
	ld	(ix+-4),l
	ld	(ix+-3),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 203: OPL3_SLOT *SLOT = (slot & 1) ? &CH->SLOT1 : &CH->SLOT0;
; _SLOT allocated to iy
	bit	0,(ix+-1)
	jp	nz,L9

u134:
	push	hl
	pop	iy
;C:\HTC\PROJECTS\OPL3\YMF262.C: 204: uint8_t ksr;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 205: SLOT->ar = (v & 0xf0) ? 16 + ((v & 0xf0) >> 2) : 0;
; _v loaded to c
	ld	c,(ix+-2)
	ld	a,c
	and	-16
	jp	nz,u153
	ld	hl,0
u154:
	ld	(iy+0),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 207: ksr = SLOT->ar + SLOT->ksr;
; _ksr allocated to b
	ld	a,l
	add	a,(iy+28)
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 208: if (ksr < 16+60)
	cp	04Ch
	jp	nc,l48
;C:\HTC\PROJECTS\OPL3\YMF262.C: 209: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 210: SLOT->eg_sh_ar = eg_rate_shift [ksr];
	ld	hl,_eg_rate_shift
	ld	a,b
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+38),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 211: SLOT->eg_sel_ar = eg_rate_select[ksr];
	ld	hl,_eg_rate_select
	ld	a,b
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+39),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 212: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 213: else
	jp	l49
L9:
	ld	de,030h
	add	hl,de
	jp	u134
u153:
	ld	a,c
	and	-16
	srl	a
	srl	a
	ld	l,a
	ld	h,0
	ld	de,010h
	add	hl,de
	jp	u154
l48:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 214: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 215: SLOT->eg_sh_ar = 0;
	ld	(iy+38),0
;C:\HTC\PROJECTS\OPL3\YMF262.C: 216: SLOT->eg_sel_ar = 13*(8);
	ld	(iy+39),068h
l49:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 217: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 219: SLOT->dr = (v&0x0f) ? 16 + ((v&0x0f)<<2) : 0;
	ld	a,c
	and	0Fh
	jp	nz,u173
	ld	hl,0
u174:
	ld	(iy+1),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 220: ksr = SLOT->dr + SLOT->ksr;
	ld	a,l
	add	a,(iy+28)
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 221: SLOT->eg_sh_dr = eg_rate_shift [ksr];
	ld	hl,_eg_rate_shift
	ld	a,b
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+40),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 222: SLOT->eg_sel_dr = eg_rate_select[ksr];
	ld	hl,_eg_rate_select
	ld	a,b
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+41),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 223: }
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
u173:
	ld	a,c
	and	0Fh
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,hl
	ld	de,010h
	add	hl,de
	jp	u174
	global	lmul
;C:\HTC\PROJECTS\OPL3\YMF262.C: 226: static void set_sl_rr(uint8_t slot, uint8_t v)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 227: {
_set_sl_rr:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	bc
	push	iy
;_v stored from c
	ld	(ix+-2),c
;_slot stored from e
	ld	(ix+-1),e
;C:\HTC\PROJECTS\OPL3\YMF262.C: 228: OPL3_CH *CH = &chip.P_CH[slot >> 1];
	ld	de,060h
	ld	a,(ix+-1)
	srl	a
	ld	l,a
	ld	h,0
	call	lmul
	ld	de,_chip
	add	hl,de
	ld	(ix+-4),l
	ld	(ix+-3),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 229: OPL3_SLOT *SLOT = (slot & 1) ? &CH->SLOT1 : &CH->SLOT0;
; _SLOT allocated to iy
	bit	0,(ix+-1)
	jp	nz,L10

u194:
	push	hl
	pop	iy
;C:\HTC\PROJECTS\OPL3\YMF262.C: 230: uint8_t ksr = SLOT->ksr;
; _ksr allocated to b
	ld	b,(iy+28)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 231: SLOT->sl = (uint16_t)sl_tab[ v>>4 ] << 1;
; _v loaded to c
	ld	c,(ix+-2)
	ld	hl,_sl_tab
	ld	e,c
	srl	e
	srl	e
	srl	e
	srl	e
	ld	a,e
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	h,0
	add	hl,hl
	ld	(iy+32),l
	ld	(iy+33),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 232: SLOT->rr = (v&0x0f) ? 16 + ((v&0x0f)<<2) : 0;
	ld	a,c
	and	0Fh
	jp	nz,u213
	ld	hl,0
u214:
	ld	(iy+2),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 233: ksr += SLOT->rr;
	ld	a,b
	add	a,(iy+2)
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 234: SLOT->eg_sh_rr = eg_rate_shift [ksr];
	ld	hl,_eg_rate_shift
	ld	a,b
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+42),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 235: SLOT->eg_sel_rr = eg_rate_select[ksr];
	ld	hl,_eg_rate_select
	ld	a,b
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	ld	l,(hl)
	ld	(iy+43),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 236: }
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
L10:
	ld	de,030h
	add	hl,de
	jp	u194
u213:
	ld	a,c
	and	0Fh
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,hl
	ld	de,010h
	add	hl,de
	jp	u214
	global	_fn_a0
	signat	_fn_a0,12344
	global	lmul
	global	shlr
	global	shlr
	global	shlr
;C:\HTC\PROJECTS\OPL3\YMF262.C: 238: void fn_a0(uint16_t r, uint8_t v, uint8_t ch_offset)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 239: {
_fn_a0:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	bc
	dec	sp
	push	iy
;_v stored from c
	ld	(ix+-1),c
; _r loaded to bc
	ld	c,e
	ld	b,d
;C:\HTC\PROJECTS\OPL3\YMF262.C: 240: OPL3_CH *CH;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 241: uint16_t block_fnum;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 243: if (r == 0xbd)
	ld	hl,0BDh
	or	a
	sbc	hl,bc
	jp	nz,l52
;C:\HTC\PROJECTS\OPL3\YMF262.C: 244: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 245: if (ch_offset != 0) return;
	ld	a,(ix+4)
	or	a
	jp	nz,l51
;C:\HTC\PROJECTS\OPL3\YMF262.C: 247: chip.lfo_am_depth = !!(v & 0x80);
; _v loaded to b
	ld	b,(ix+-1)
	bit	07h,b
	ld	a,01h
	jp	nz,u220
	dec	a
u220:
	ld	(_chip+06CCh),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 248: chip.lfo_pm_depth_range = (v & 0x40) ? 8 : 0;
	bit	06h,b
	ld	a,08h
	jp	nz,u230
	ld	a,0
u230:
	ld	(_chip+06CDh),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 249: chip.rhythm = !!(v & 0x20);
	bit	05h,b
	ld	a,01h
	jp	nz,u240
	dec	a
u240:
	ld	(_chip+06CFh),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 251: if (chip.rhythm)
	or	a
	jp	z,l54
;C:\HTC\PROJECTS\OPL3\YMF262.C: 252: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 254: if (v & 0x10)
	bit	04h,b
	jp	z,l55
;C:\HTC\PROJECTS\OPL3\YMF262.C: 255: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 256: FM_KEYON(&chip.P_CH[6].SLOT0, 2);
	ld	c,02h
	ld	de,_chip+0240h
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 257: FM_KEYON(&chip.P_CH[6].SLOT1, 2);
	ld	c,02h
	ld	de,_chip+0270h
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 258: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 259: else
	jp	l56
l55:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 260: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 261: FM_KEYOFF(&chip.P_CH[6].SLOT0, ~2);
	ld	c,-3
	ld	de,_chip+0240h
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 262: FM_KEYOFF(&chip.P_CH[6].SLOT1, ~2);
	ld	c,-3
	ld	de,_chip+0270h
	call	_FM_KEYOFF
l56:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 263: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 265: if (v & 0x01) FM_KEYON(&chip.P_CH[7].SLOT0, 2);
	bit	0,b
	jp	z,l57
	ld	c,02h
	ld	de,_chip+02A0h
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 266: else FM_KEYOFF(&chip.P_CH[7].SLOT0, ~2);
	jp	l58
l57:
	ld	c,-3
	ld	de,_chip+02A0h
	call	_FM_KEYOFF
l58:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 268: if (v & 0x08) FM_KEYON(&chip.P_CH[7].SLOT1, 2);
	bit	03h,b
	jp	z,l59
	ld	c,02h
	ld	de,_chip+02D0h
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 269: else FM_KEYOFF(&chip.P_CH[7].SLOT1, ~2);
	jp	l60
l59:
	ld	c,-3
	ld	de,_chip+02D0h
	call	_FM_KEYOFF
l60:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 271: if (v & 0x04) FM_KEYON(&chip.P_CH[8].SLOT0, 2);
	bit	02h,b
	jp	z,l61
	ld	c,02h
	ld	de,_chip+0300h
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 272: else FM_KEYOFF(&chip.P_CH[8].SLOT0, ~2);
	jp	l62
l61:
	ld	c,-3
	ld	de,_chip+0300h
	call	_FM_KEYOFF
l62:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 274: if (v & 0x02) FM_KEYON(&chip.P_CH[8].SLOT1, 2);
	bit	01h,b
	jp	z,l63
	ld	c,02h
	ld	de,_chip+0330h
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 275: else FM_KEYOFF(&chip.P_CH[8].SLOT1, ~2);
	jp	l51
l54:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 278: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 280: FM_KEYOFF(&chip.P_CH[6].SLOT0, ~2);
	ld	c,-3
	ld	de,_chip+0240h
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 281: FM_KEYOFF(&chip.P_CH[6].SLOT1, ~2);
	ld	c,-3
	ld	de,_chip+0270h
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 283: FM_KEYOFF(&chip.P_CH[7].SLOT0, ~2);
	ld	c,-3
	ld	de,_chip+02A0h
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 285: FM_KEYOFF(&chip.P_CH[7].SLOT1, ~2);
	ld	c,-3
	ld	de,_chip+02D0h
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 287: FM_KEYOFF(&chip.P_CH[8].SLOT0, ~2);
	ld	c,-3
	ld	de,_chip+0300h
	call	_FM_KEYOFF
l63:
	ld	c,-3
	ld	de,_chip+0330h
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 276: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 277: else
	jp	l51
;C:\HTC\PROJECTS\OPL3\YMF262.C: 290: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 291: return;
l52:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 292: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 295: if ((r & 0x0f) > 8) return;
;_r stored from bc
	ld	(ix+-5),c
	ld	(ix+-4),b
	ld	de,09h
	ld	a,c
	and	0Fh
	ld	l,a
	ld	h,0
	or	a
	sbc	hl,de
	jp	nc,l51
;C:\HTC\PROJECTS\OPL3\YMF262.C: 296: CH = &chip.P_CH[(r & 0x0f) + ch_offset];
; _CH allocated to iy
	ld	de,060h
	ld	c,(ix+4)
	ld	b,0
	ld	a,(ix+-5)
	and	0Fh
	ld	l,a
	ld	h,b
	add	hl,bc
	call	lmul
	ld	de,_chip
	add	hl,de
	push	hl
	pop	iy
; _v loaded to c
	ld	c,(ix+-1)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 298: if (!(r & 0x10)) block_fnum = (CH->block_fnum & 0x1f00) | v;
; _r loaded to de
	ld	e,(ix+-5)
	ld	d,(ix+-4)
	bit	04h,e
	jp	nz,l67
	ld	a,(iy+45)
	and	01Fh
	ld	h,a
	ld	a,c
	ld	(ix+-3),a
	ld	(ix+-2),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 299: else
	jp	l68
l67:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 300: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 301: block_fnum = ((v & 0x1f) << 8) | (CH->block_fnum & 0xff);
	ld	a,c
	and	01Fh
	ld	l,(iy+44)
	ld	h,a
	ld	(ix+-3),l
	ld	(ix+-2),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 303: if (chip.OPL3_mode)
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l69
;C:\HTC\PROJECTS\OPL3\YMF262.C: 304: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 305: uint8_t chan_no = (r & 0x0f) + ch_offset;
; _chan_no allocated to b
	ld	a,e
	and	0Fh
	add	a,(ix+4)
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 306: switch (chan_no)
	ld	l,a
	ld	h,0
	xor	a
	or	a
	jp	c,l94
	jp	nz,j18
	ld	a,0Eh
	cp	l
	jp	c,l94
j18:
	add	hl,hl
	ld	de,S18
L11:
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)
l77:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 310: if (CH->extended)
	ld	a,(iy+92)
	or	a
	jp	z,l78
;C:\HTC\PROJECTS\OPL3\YMF262.C: 311: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 312: if (v & 0x20)
	bit	05h,c
	jp	z,l79
;C:\HTC\PROJECTS\OPL3\YMF262.C: 313: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 314: FM_KEYON(&CH->SLOT0, 1);
	ld	c,01h
	push	iy
	pop	de
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 315: FM_KEYON(&CH->SLOT1, 1);
	ld	c,01h
	ld	de,030h
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 316: FM_KEYON(&(CH + 3)->SLOT0, 1);
	ld	c,01h
	ld	de,0120h
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 317: FM_KEYON(&(CH + 3)->SLOT1, 1);
	ld	c,01h
	ld	de,0150h
L17:
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 318: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 319: else
	jp	l68
l79:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 320: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 321: FM_KEYOFF(&CH->SLOT0, ~1);
	ld	c,-2
	push	iy
	pop	de
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 322: FM_KEYOFF(&CH->SLOT1, ~1);
	ld	c,-2
	ld	de,030h
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 323: FM_KEYOFF(&(CH + 3)->SLOT0, ~1);
	ld	c,-2
	ld	de,0120h
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 324: FM_KEYOFF(&(CH + 3)->SLOT1, ~1);
	ld	c,-2
	ld	de,0150h
L21:
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 325: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 326: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 327: else
	jp	l68
l78:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 328: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 329: if (v & 0x20)
	bit	05h,c
	jp	z,L23

L19:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 330: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 331: FM_KEYON(&CH->SLOT0, 1);
	ld	c,01h
	push	iy
	pop	de
	call	_FM_KEYON
;C:\HTC\PROJECTS\OPL3\YMF262.C: 332: FM_KEYON(&CH->SLOT1, 1);
	ld	c,01h
	ld	de,030h
	jp	L17

;C:\HTC\PROJECTS\OPL3\YMF262.C: 339: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 340: break;
l89:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 344: if ((CH - 3)->extended)
	ld	hl,-196
	push	iy
	pop	de
	add	hl,de
	ld	a,(hl)
	or	a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 345: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 347: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 348: else
	jp	nz,l68
;C:\HTC\PROJECTS\OPL3\YMF262.C: 349: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 350: if (v & 0x20)
	bit	05h,c
	jp	nz,L19

;C:\HTC\PROJECTS\OPL3\YMF262.C: 333: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 334: else
L23:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 335: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 336: FM_KEYOFF(&CH->SLOT0, ~1);
	ld	c,-2
	push	iy
	pop	de
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 337: FM_KEYOFF(&CH->SLOT1, ~1);
	ld	c,-2
	ld	de,030h
	jp	L21

;C:\HTC\PROJECTS\OPL3\YMF262.C: 360: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 361: break;
l94:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 363: default:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 364: if (v & 0x20)
	bit	05h,c
	jp	nz,L19

	jp	L23

;C:\HTC\PROJECTS\OPL3\YMF262.C: 376: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 377: else
l69:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 378: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 379: if (v & 0x20)
	bit	05h,c
	jp	nz,L19

;C:\HTC\PROJECTS\OPL3\YMF262.C: 385: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 386: FM_KEYOFF(&CH->SLOT0, ~1);
	ld	c,-2
	push	iy
	pop	de
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 387: FM_KEYOFF(&CH->SLOT1, ~1);
	ld	c,-2
	ld	de,030h
	push	iy
	pop	hl
	add	hl,de
	ex	de,hl
	call	_FM_KEYOFF
;C:\HTC\PROJECTS\OPL3\YMF262.C: 389: }
l68:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 390: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 392: if (CH->block_fnum != block_fnum)
	ld	c,(ix+-3)
	ld	b,(ix+-2)
	ld	l,(iy+44)
	ld	h,(iy+45)
	or	a
	sbc	hl,bc
	jp	z,l51
;C:\HTC\PROJECTS\OPL3\YMF262.C: 393: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 394: CH->block_fnum = block_fnum;
	ld	l,c
	ld	h,b
	ld	(iy+44),l
	ld	(iy+45),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 395: CH->ksl_base = ksl_tab[block_fnum >> 6];
	ld	b,06h
	call	shlr
	ld	de,_ksl_tab
	add	hl,de
	ld	l,(hl)
	ld	(iy+93),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 398: CH->kcode = (CH->block_fnum & 0x1c00) >> 9;
	ld	b,09h
	ld	a,(iy+45)
	and	01Ch
	ld	h,a
	ld	l,0
	call	shlr
	ld	(iy+94),l
;C:\HTC\PROJECTS\OPL3\YMF262.C: 403: if (chip.nts & 0x40) CH->kcode |= (CH->block_fnum >> 8) & 1;
	ld	a,(_chip+06D2h)
	bit	06h,a
	jp	z,l101
	ld	a,(iy+45)
	and	01h
	ld	c,a
	ld	a,l
	or	c
	ld	(iy+94),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 404: else CH->kcode |= (CH->block_fnum >> 9) & 1;
	jp	l102
l101:
	ld	b,09h
	ld	l,(iy+44)
	ld	h,(iy+45)
	call	shlr
	ld	a,l
	and	01h
	ld	c,a
	ld	a,(iy+94)
	or	c
	ld	(iy+94),a
l102:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 406: if (chip.OPL3_mode)
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l103
;C:\HTC\PROJECTS\OPL3\YMF262.C: 407: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 408: uint8_t chan_no = (r & 0x0f) + ch_offset;
; _chan_no allocated to b
	ld	a,(ix+-5)
	and	0Fh
	add	a,(ix+4)
	ld	b,a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 409: switch (chan_no)
	ld	l,a
	ld	h,0
	xor	a
	or	a
	jp	c,l103
	jp	nz,j19
	ld	a,0Eh
	cp	l
	jp	c,l103
j19:
	add	hl,hl
	ld	de,S19
	jp	L11

l111:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 413: if (CH->extended)
	ld	a,(iy+92)
	or	a
	jp	z,l103
;C:\HTC\PROJECTS\OPL3\YMF262.C: 414: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 416: (CH + 3)->SLOT0.AMmask_TLL = (CH + 3)->SLOT0.TL + (CH->ksl_base >> (CH + 3)->SLOT0.ksl) + ((CH + 3)->SLOT0.AMmask_TLL & 0x8000);
	ld	hl,0134h
	push	iy
	pop	de
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	a,(hl)
	and	080h
	ld	d,a
	ld	e,0
	ld	hl,013Bh
	push	iy
	pop	bc
	add	hl,bc
	ld	b,(hl)
	ld	a,(iy+93)
	inc	b
	dec	b
	jp	z,u251
u250:
	srl	a
	djnz	u250
u251:
	ld	c,a
	ld	b,0
	push	bc
	ld	hl,0130h
	push	iy
	pop	bc
	add	hl,bc
	ld	l,(hl)
	ld	h,0
	pop	bc
	add	hl,bc
	add	hl,de
	ex	de,hl
	ld	hl,0134h
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
;C:\HTC\PROJECTS\OPL3\YMF262.C: 417: (CH + 3)->SLOT1.AMmask_TLL = (CH + 3)->SLOT1.TL + (CH->ksl_base >> (CH + 3)->SLOT1.ksl) + ((CH + 3)->SLOT1.AMmask_TLL & 0x8000);
	ld	hl,0164h
	push	iy
	pop	de
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	a,(hl)
	and	080h
	ld	d,a
	ld	e,0
	ld	hl,016Bh
	push	iy
	pop	bc
	add	hl,bc
	ld	b,(hl)
	ld	a,(iy+93)
	inc	b
	dec	b
	jp	z,u261
u260:
	srl	a
	djnz	u260
u261:
	ld	c,a
	ld	b,0
	push	bc
	ld	hl,0160h
	push	iy
	pop	bc
	add	hl,bc
	ld	l,(hl)
	ld	h,0
	pop	bc
	add	hl,bc
	add	hl,de
	ex	de,hl
	ld	hl,0164h
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
;C:\HTC\PROJECTS\OPL3\YMF262.C: 420: CALC_FCSLOT(CH, &(CH + 3)->SLOT0);
	ld	hl,0120h
	push	iy
	pop	de
	add	hl,de
	ld	c,l
	ld	b,h
	push	iy
	pop	de
	call	_CALC_FCSLOT
;C:\HTC\PROJECTS\OPL3\YMF262.C: 421: CALC_FCSLOT(CH, &(CH + 3)->SLOT1);
	ld	hl,0150h
	push	iy
	pop	de
	add	hl,de
	ld	c,l
	ld	b,h
	push	iy
	pop	de
	call	_CALC_FCSLOT
;C:\HTC\PROJECTS\OPL3\YMF262.C: 428: break;
l103:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 430: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 433: CH->SLOT0.AMmask_TLL = CH->SLOT0.TL + (CH->ksl_base >> CH->SLOT0.ksl) + (CH->SLOT0.AMmask_TLL & 0x8000);
	ld	a,(iy+21)
	and	080h
	ld	d,a
	ld	e,0
	ld	b,(iy+27)
	ld	a,(iy+93)
	inc	b
	dec	b
	jp	z,u271
u270:
	srl	a
	djnz	u270
u271:
	ld	l,a
	ld	h,0
	ld	a,(iy+16)
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	add	hl,de
	ld	(iy+20),l
	ld	(iy+21),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 434: CH->SLOT1.AMmask_TLL = CH->SLOT1.TL + (CH->ksl_base >> CH->SLOT1.ksl) + (CH->SLOT1.AMmask_TLL & 0x8000);
	ld	a,(iy+69)
	and	080h
	ld	d,a
	ld	e,0
	ld	b,(iy+75)
	ld	a,(iy+93)
	inc	b
	dec	b
	jp	z,u281
u280:
	srl	a
	djnz	u280
u281:
	ld	l,a
	ld	h,0
	ld	a,(iy+64)
	add	a,l
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	add	hl,de
	ld	(iy+68),l
	ld	(iy+69),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 437: CALC_FCSLOT(CH, &CH->SLOT0);
	push	iy
	pop	bc
	push	iy
	pop	de
	call	_CALC_FCSLOT
;C:\HTC\PROJECTS\OPL3\YMF262.C: 438: CALC_FCSLOT(CH, &CH->SLOT1);
	ld	hl,030h
	push	iy
	pop	de
	add	hl,de
	ld	c,l
	ld	b,h
	push	iy
	pop	de
	call	_CALC_FCSLOT
;C:\HTC\PROJECTS\OPL3\YMF262.C: 439: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 440: }
l51:
	pop	iy
	ld	sp,ix
	pop	ix
	pop	hl
	pop	af
	jp	(hl)
l118:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 427: if ((CH - 3)->extended) return;
	ld	hl,-196
	push	iy
	pop	de
	add	hl,de
	ld	a,(hl)
	or	a
	jp	z,l103
	jp	l51
	psect		const
S18:
	defw	l77
	defw	l77
	defw	l77
	defw	l89
	defw	l89
	defw	l89
	defw	l94
	defw	l94
	defw	l94
	defw	l77
	defw	l77
	defw	l77
	defw	l89
	defw	l89
	defw	l89
S19:
	defw	l111
	defw	l111
	defw	l111
	defw	l118
	defw	l118
	defw	l118
	defw	l103
	defw	l103
	defw	l103
	defw	l111
	defw	l111
	defw	l111
	defw	l118
	defw	l118
	defw	l118
	global	_packptr16
	signat	_packptr16,4154
	global	shll
	psect		text
;C:\HTC\PROJECTS\OPL3\YMF262.C: 442: uint16_t packptr16(void *ptr)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 443: {
_packptr16:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	bc
	dec	sp
;C:\HTC\PROJECTS\OPL3\YMF262.C: 444: uint16_t v;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 445: uint16_t i = (uint8_t*)ptr - (uint8_t*)&chip;
	ld	bc,_chip
	ld	l,e
	ld	h,d
	or	a
	sbc	hl,bc
	ld	(ix+-5),l
	ld	(ix+-4),h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 446: uint8_t j;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 447: for (j = 0; i >= 96; i -= 96, j++);
	ld	(ix+-1),0
	ld	bc,060h
	or	a
	sbc	hl,bc
	jp	c,l122
l121:
	ld	bc,060h
	ld	l,(ix+-5)
	ld	h,(ix+-4)
	or	a
	sbc	hl,bc
	ld	(ix+-5),l
	ld	(ix+-4),h
	inc	(ix+-1)
	or	a
	sbc	hl,bc
	jp	nc,l121
l122:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 448: v = (uint16_t)j << 7;
	ld	b,07h
	ld	l,(ix+-1)
	ld	h,0
	call	shll
	ld	(ix+-3),l
	ld	(ix+-2),h
; _v loaded to bc
	ld	c,l
	ld	b,h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 449: j = i & 0xff;
; _j allocated to e
	ld	e,(ix+-5)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 450: if (j >= 48) j -= 48, v |= 64;
	ld	a,e
	cp	030h
	jp	c,L24

	sub	030h
	ld	e,a
	set	06h,c
;C:\HTC\PROJECTS\OPL3\YMF262.C: 451: return v | j;
	ld	a,e
L24:
	or	c
	ld	l,a
	ld	h,b
;C:\HTC\PROJECTS\OPL3\YMF262.C: 452: }
	ld	sp,ix
	pop	ix
	ret	
	global	lmul
	global	allsh
	global	lllsh
	global	lland
	global	llor
	global	lllsh
	global	lland
	global	llor
	global	push_long
	global	asllor
	global	push_long
	global	asllor
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	lmul
	global	amul
;C:\HTC\PROJECTS\OPL3\YMF262.C: 455: static void OPL3WriteReg(uint16_t r, uint8_t v)
;C:\HTC\PROJECTS\OPL3\YMF262.C: 456: {
_OPL3WriteReg:
	push	ix
	ld	ix,0
	add	ix,sp
	ld	hl,-11
	add	hl,sp
	ld	sp,hl
	push	iy
;_v stored from c
	ld	(ix+-4),c
; _r loaded to bc
	ld	c,e
	ld	b,d
;C:\HTC\PROJECTS\OPL3\YMF262.C: 457: OPL3_CH *CH;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 458: uint8_t ch_offset = 0, base;
; _ch_offset allocated to e
	ld	e,0
;C:\HTC\PROJECTS\OPL3\YMF262.C: 459: int8_t slot;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 460: uint32_t mask;
;C:\HTC\PROJECTS\OPL3\YMF262.C: 462: if(r & 0x100)
	bit	0,b
	jp	z,l126
;C:\HTC\PROJECTS\OPL3\YMF262.C: 463: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 464: switch(r)
	ld	l,c
	ld	h,b
	ld	a,h
	cp	01h
	jp	nz,l127
	ld	a,l
	cp	01h
	jp	z,l125
	cp	04h
	jp	z,l130
	cp	05h
	jp	z,l131
l127:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 489: ch_offset = 9;
	ld	e,09h
l126:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 490: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 492: r &= 0xff;
;_ch_offset stored from e
	ld	(ix+-2),e
	ld	b,0
;C:\HTC\PROJECTS\OPL3\YMF262.C: 494: switch(r & 0xe0)
	ld	(ix+-6),c
	ld	(ix+-5),b
	ld	a,c
	and	0E0h
	ld	l,a
	ld	h,b
	xor	a
	or	a
	jp	nz,l125
	ld	a,l
	or	a
	jp	z,l136
	cp	020h
	jp	z,l142
	cp	040h
	jp	z,l144
	cp	060h
	jp	z,l146
	cp	080h
	jp	z,l148
	cp	0A0h
	jp	z,l150
	cp	0C0h
	jp	z,l151
	cp	0E0h
	jp	z,l188
	jp	l125
;C:\HTC\PROJECTS\OPL3\YMF262.C: 465: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 466: case 0x101: return;
l130:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 468: case 0x104:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 469: {
;C:\HTC\PROJECTS\OPL3\YMF262.C: 470: CH = &chip.P_CH[0];
; _CH allocated to iy
	ld	iy,_chip
;C:\HTC\PROJECTS\OPL3\YMF262.C: 471: CH->extended = v & 1;
; _v loaded to b
	ld	b,(ix+-4)
	ld	a,b
	and	01h
	ld	(iy+92),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 472: CH++;
	ld	de,060h
	add	iy,de
;C:\HTC\PROJECTS\OPL3\YMF262.C: 473: CH->extended = (v>>=1) & 1;
	srl	b
	ld	a,b
	and	01h
	ld	(iy+92),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 474: CH++;
	add	iy,de
;C:\HTC\PROJECTS\OPL3\YMF262.C: 475: CH->extended = (v>>=1) & 1;
	srl	b
	ld	a,b
	and	01h
	ld	(iy+92),a
;_v stored from b
	ld	(ix+-4),b
;C:\HTC\PROJECTS\OPL3\YMF262.C: 476: CH = &chip.P_CH[9];
	ld	iy,_chip+0360h
;C:\HTC\PROJECTS\OPL3\YMF262.C: 477: CH->extended = (v>>=1) & 1;
	srl	(ix+-4)
	ld	a,(ix+-4)
	and	01h
	ld	(iy+92),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 478: CH++;
	add	iy,de
;C:\HTC\PROJECTS\OPL3\YMF262.C: 479: CH->extended = (v>>=1) & 1;
	srl	(ix+-4)
	ld	a,(ix+-4)
	and	01h
	ld	(iy+92),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 480: CH++;
	add	iy,de
;C:\HTC\PROJECTS\OPL3\YMF262.C: 481: CH->extended = (v>>1) & 1;
	ld	a,(ix+-4)
	srl	a
	and	01h
	ld	(iy+92),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 482: }
;C:\HTC\PROJECTS\OPL3\YMF262.C: 483: return;
l125:
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
l131:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 485: case 0x105:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 486: chip.OPL3_mode = v & 0x01;
	ld	a,(ix+-4)
	and	01h
	ld	(_chip+06CEh),a
;C:\HTC\PROJECTS\OPL3\YMF262.C: 487: return;
	jp	l125
;C:\HTC\PROJECTS\OPL3\YMF262.C: 505: case 0x04:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 506: break;
l141:
;C:\HTC\PROJECTS\OPL3\YMF262.C: 507: case 0x08:
	ld	a,(ix+-4)
	ld	(_chip+06D2h),a
	jp	l125
l136:
	ld	a,(ix+-6)
	and	01Fh
	ld	l,a
	ld	h,0
	xor	a
	or	a
	jp	nz,l125
	ld	a,l
	cp	01h
	jp	z,l125
	cp	02h
	jp	z,l125
	cp	03h
	jp	z,l125
	cp	04h
	jp	z,l125
	cp	08h
	jp	z,l141
	jp	l125
l142:
	ld	a,(ix+-6)
	and	01Fh
	ld	l,a
	ld	h,0
	ld	de,_slot_array
	add	hl,de
	ld	b,(hl)
	ld	a,b
	or	a
	jp	m,l125
	ld	c,(ix+-4)
	ld	a,(ix+-2)
	sll	a
	add	a,b
	ld	e,a
	call	_set_mul
	jp	l125
l144:
	ld	a,(ix+-6)
	and	01Fh
	ld	l,a
	ld	h,0
	ld	de,_slot_array
	add	hl,de
	ld	b,(hl)
	ld	a,b
	or	a
	jp	m,l125
	ld	c,(ix+-4)
	ld	a,(ix+-2)
	sll	a
	add	a,b
	ld	e,a
	call	_set_ksl_tl
	jp	l125
l146:
	ld	a,(ix+-6)
	and	01Fh
	ld	l,a
	ld	h,0
	ld	de,_slot_array
	add	hl,de
	ld	b,(hl)
	ld	a,b
	or	a
	jp	m,l125
	ld	c,(ix+-4)
	ld	a,(ix+-2)
	sll	a
	add	a,b
	ld	e,a
	call	_set_ar_dr
	jp	l125
l148:
	ld	a,(ix+-6)
	and	01Fh
	ld	l,a
	ld	h,0
	ld	de,_slot_array
	add	hl,de
	ld	b,(hl)
	ld	a,b
	or	a
	jp	m,l125
	ld	c,(ix+-4)
	ld	a,(ix+-2)
	sll	a
	add	a,b
	ld	e,a
	call	_set_sl_rr
	jp	l125
l150:
	ld	l,(ix+-2)
	push	hl
	ld	c,(ix+-4)
	ld	e,(ix+-6)
	ld	d,(ix+-5)
	call	_fn_a0
	jp	l125
l151:
	ld	bc,09h
	ld	a,(ix+-6)
	and	0Fh
	ld	l,a
	ld	h,0
	or	a
	sbc	hl,bc
	jp	nc,l125
	ld	de,060h
	ld	c,(ix+-2)
	ld	b,0
	ld	a,(ix+-6)
	and	0Fh
	ld	l,a
	ld	h,b
	add	hl,bc
	call	lmul
	ld	de,_chip
	add	hl,de
	push	hl
	pop	iy
	ld	a,(ix+-6)
	and	0Fh
	add	a,(ix+-2)
	ld	c,a
	ld	b,c
	ld	de,01h
	ld	hl,0
	call	allsh
	ld	(ix+-10),e
	ld	(ix+-9),d
	ld	(ix+-8),l
	ld	(ix+-7),h
	ld	(ix+-1),c
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l153
	ld	b,c
	ld	a,(ix+-4)
	and	010h
	srl	a
	srl	a
	srl	a
	srl	a
	ld	e,a
	ld	hl,0
	ld	d,h
	call	lllsh
	push	hl
	push	de
	ld	hl,(_chip+06C6h)
	push	hl
	ld	hl,(_chip+06C4h)
	push	hl
	ld	e,(ix+-10)
	ld	d,(ix+-9)
	ld	hl,-1
	or	a
	sbc	hl,de
	ex	de,hl
	ld	a,-1
	sbc	a,(ix+-8)
	ld	l,a
	ld	a,-1
	sbc	a,(ix+-7)
	ld	h,a
	call	lland
	call	llor
	ld	(_chip+06C4h),de
	ld	(_chip+06C6h),hl
	ld	b,(ix+-1)
	ld	a,(ix+-4)
	and	020h
	srl	a
	srl	a
	srl	a
	srl	a
	srl	a
	ld	e,a
	ld	hl,0
	ld	d,h
	call	lllsh
	push	hl
	push	de
	ld	hl,(_chip+06CAh)
	push	hl
	ld	hl,(_chip+06C8h)
	push	hl
	ld	e,(ix+-10)
	ld	d,(ix+-9)
	ld	hl,-1
	or	a
	sbc	hl,de
	ex	de,hl
	ld	a,-1
	sbc	a,(ix+-8)
	ld	l,a
	ld	a,-1
	sbc	a,(ix+-7)
	ld	h,a
	call	lland
	call	llor
	ld	(_chip+06C8h),de
	ld	(_chip+06CAh),hl
	jp	l154
l153:
	ld	hl,-10
	call	push_long
	ld	hl,_chip+06C4h
	call	asllor
	ld	hl,-10
	call	push_long
	ld	hl,_chip+06C8h
	call	asllor
l154:
	ld	c,(ix+-4)
	ld	a,c
	and	0Eh
	jp	nz,u303
	ld	hl,0
u304:
	ld	(iy+24),l
	ld	a,c
	and	01h
	ld	(iy+17),a
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l155
	ld	a,(ix+-6)
	and	0Fh
	add	a,(ix+-2)
	ld	b,a
	ld	(ix+-11),b
	ld	a,b
	ld	l,a
	ld	h,0
	xor	a
	or	a
	jp	c,l186
	jp	nz,j24
	ld	a,0Eh
	cp	l
	jp	c,l186
j24:
	add	hl,hl
	ld	de,S24
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)
u303:
	ld	a,c
	and	0Eh
	srl	a
	ld	e,a
	ld	d,0
	ld	hl,09h
	or	a
	sbc	hl,de
	jp	u304
l163:
	ld	a,(iy+92)
	or	a
	jp	z,l164
	ld	hl,0131h
	push	iy
	pop	de
	add	hl,de
	ld	a,(iy+17)
	sll	a
	or	(hl)
	ld	b,a
	or	a
	jp	z,l167
	cp	01h
	jp	z,l168
	cp	02h
	jp	z,l169
	cp	03h
	jp	z,l170
	jp	l125
l167:
	ld	de,_chip+06C0h
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,_chip+06C2h
L27:
	call	_packptr16
	ld	(iy+84),l
	ld	(iy+85),h
	ld	de,_chip+06C0h
L34:
	call	_packptr16
	ex	de,hl
	ld	hl,0144h
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip+014Eh
	add	hl,de
	ex	de,hl
	call	_packptr16
	ex	de,hl
	ld	hl,0174h
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	jp	l125
l168:
	ld	de,_chip+06C0h
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	ex	de,hl
	jp	L27

l169:
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	ex	de,hl
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,_chip+06C2h
	call	_packptr16
	ld	(iy+84),l
	ld	(iy+85),h
	ld	de,_chip+06C0h
	jp	L34

l170:
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	ex	de,hl
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,_chip+06C2h
	call	_packptr16
	ld	(iy+84),l
	ld	(iy+85),h
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip+014Eh
	add	hl,de
	ex	de,hl
	jp	L34

l164:
	ld	a,(iy+17)
	or	a
	jp	nz,L30

	ld	hl,_chip+06C0h
L25:
	ex	de,hl
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,060h
	ld	c,(ix+-2)
	ld	b,0
	ld	a,(ix+-6)
	and	0Fh
	ld	l,a
	ld	h,b
	add	hl,bc
L36:
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	ex	de,hl
	call	_packptr16
	ld	(iy+84),l
	ld	(iy+85),h
	jp	l125
L30:
	ld	de,060h
	ld	c,(ix+-2)
	ld	b,0
	ld	a,(ix+-6)
	and	0Fh
	ld	l,a
	ld	h,b
	add	hl,bc
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	jp	L25

l177:
	ld	hl,-196
	push	iy
	pop	de
	add	hl,de
	ld	a,(hl)
	or	a
	jp	z,l178
	ld	hl,-271
	push	iy
	pop	de
	add	hl,de
	ld	a,(hl)
	sll	a
	or	(iy+17)
	ld	b,a
	or	a
	jp	z,l181
	cp	01h
	jp	z,l182
	cp	02h
	jp	z,l183
	cp	03h
	jp	z,l184
	jp	l125
l181:
	ld	de,_chip+06C0h
	call	_packptr16
	ex	de,hl
	ld	hl,-252
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,_chip+06C2h
L37:
	call	_packptr16
	ex	de,hl
	ld	hl,-204
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,_chip+06C0h
L38:
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	jp	L36

l182:
	ld	de,_chip+06C0h
	call	_packptr16
	ex	de,hl
	ld	hl,-252
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip-242
	add	hl,de
	ex	de,hl
	jp	L37

l183:
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip-242
	add	hl,de
	ex	de,hl
	call	_packptr16
	ex	de,hl
	ld	hl,-252
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,_chip+06C2h
	jp	L37

l184:
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip-242
	add	hl,de
	ex	de,hl
	call	_packptr16
	ex	de,hl
	ld	hl,-252
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,_chip+06C2h
	call	_packptr16
	ex	de,hl
	ld	hl,-204
	push	iy
	pop	bc
	add	hl,bc
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	de,060h
	ld	l,(ix+-11)
	ld	h,0
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	ex	de,hl
	jp	L38

l178:
	ld	a,(iy+17)
	or	a
	jp	nz,L30

	ld	hl,_chip+06C0h
	jp	L25

l186:
	ld	a,(iy+17)
	or	a
	jp	nz,L33

	ld	hl,_chip+06C0h
L26:
	ex	de,hl
	call	_packptr16
	ld	(iy+36),l
	ld	(iy+37),h
	ld	de,060h
	ld	c,(ix+-2)
	ld	b,0
	ld	a,(ix+-6)
	and	0Fh
	ld	l,a
	ld	h,b
	add	hl,bc
	jp	L36

L33:
	ld	de,060h
	ld	c,(ix+-2)
	ld	b,0
	ld	a,(ix+-6)
	and	0Fh
	ld	l,a
	ld	h,b
	add	hl,bc
	call	lmul
	ld	de,_chip+02Eh
	add	hl,de
	jp	L26

l155:
	ld	a,(iy+17)
	or	a
	jp	nz,L33

	ld	hl,_chip+06C0h
	jp	L26

l188:
	ld	a,(ix+-6)
	and	01Fh
	ld	l,a
	ld	h,0
	ld	de,_slot_array
	add	hl,de
	ld	b,(hl)
	ld	a,b
	or	a
	jp	m,l125
	ld	c,(ix+-2)
	sla	c
	ld	a,b
	add	a,c
	ld	b,a
	ld	(ix+-3),b
	ld	de,060h
	ld	a,b
	sra	a
	ld	l,a
	rla
	sbc	a,a
	ld	h,a
	call	amul
	ld	de,_chip
	add	hl,de
	push	hl
	pop	iy
	ld	a,(ix+-4)
	and	07h
	ld	c,a
	ld	b,(ix+-3)
	bit	0,b
	jp	z,l190
	ld	(iy+83),c
	jp	l191
l190:
	ld	(iy+35),c
l191:
	ld	a,(_chip+06CEh)
	or	a
	jp	nz,l192
	ld	a,c
	and	03h
	ld	c,a
l192:
	bit	0,b
	jp	z,l193
	ld	(iy+73),c
	jp	l125
l193:
	ld	(iy+25),c
	jp	l125
	psect		const
S24:
	defw	l163
	defw	l163
	defw	l163
	defw	l177
	defw	l177
	defw	l177
	defw	l186
	defw	l186
	defw	l186
	defw	l163
	defw	l163
	defw	l163
	defw	l177
	defw	l177
	defw	l177
	global	_OPL3ResetChip
	signat	_OPL3ResetChip,24
	global	lmul
	psect		text
_OPL3ResetChip:
	push	ix
	ld	ix,0
	add	ix,sp
	push	bc
	push	iy
	ld	de,_chip
	ld	a,0
	ld	bc,06D2h
	ld	(de),a
	ld	l,e
	ld	h,d
	inc	de
	ldir
	ld	(ix+-2),0FFh
	ld	(ix+-1),0
l196:
	ld	c,0
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	call	_OPL3WriteReg
	ld	c,(ix+-2)
	ld	b,(ix+-1)
	dec	bc
	ld	(ix+-2),c
	ld	(ix+-1),b
	ld	de,020h
	ld	l,c
	ld	h,b
	or	a
	sbc	hl,de
	jp	nc,l196
	ld	(ix+-2),0FFh
	ld	(ix+-1),01h
l199:
	ld	c,0
	ld	e,(ix+-2)
	ld	d,(ix+-1)
	call	_OPL3WriteReg
	ld	c,(ix+-2)
	ld	b,(ix+-1)
	dec	bc
	ld	(ix+-2),c
	ld	(ix+-1),b
	ld	de,0120h
	ld	l,c
	ld	h,b
	or	a
	sbc	hl,de
	jp	nc,l199
	ld	(ix+-2),0
	ld	(ix+-1),0
l202:
	ld	de,060h
	ld	l,(ix+-2)
	ld	h,(ix+-1)
	call	lmul
	ld	de,_chip
	add	hl,de
	push	hl
	pop	iy
	ld	(iy+18),0
	ld	(iy+22),0FFh
	ld	(iy+23),01h
	ld	(iy+66),0
	ld	(iy+70),0FFh
	ld	(iy+71),01h
	ld	c,(ix+-2)
	ld	b,(ix+-1)
	inc	bc
	ld	(ix+-2),c
	ld	(ix+-1),b
	ld	de,012h
	ld	l,c
	ld	h,b
	or	a
	sbc	hl,de
	jp	c,l202
	pop	iy
	ld	sp,ix
	pop	ix
	ret	
	global	_OPL3Write
	signat	_OPL3Write,8248
_OPL3Write:
	ld	b,c
	ld	c,e
	ld	a,c
	and	03h
	ld	l,a
	ld	h,0
	xor	a
	or	a
	ret	nz
	ld	a,l
	or	a
	jp	z,l208
	cp	01h
	jp	z,l210
	cp	02h
	jp	z,l211
	cp	03h
	jp	z,l210
	ret	
l208:
	ld	l,b
	ld	h,0
	ld	(_chip+06D0h),hl
	ret	
l210:
	ld	c,b
	ld	de,(_chip+06D0h)
	call	_OPL3WriteReg
	ret	
l211:
	ld	a,(_chip+06CEh)
	or	a
	jp	z,l212
	ld	l,b
	ld	h,0
	set	0,h
	ld	(_chip+06D0h),hl
	ret	
l212:
	ld	a,b
	cp	05h
	ld	l,b
	ld	h,0
	jp	nz,L39

	set	0,h
	ld	(_chip+06D0h),hl
	ret	
L39:
	ld	(_chip+06D0h),hl
	ret	
	end
